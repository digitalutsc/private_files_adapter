<?php

/**
 * @file
 * Contains private_files_adapter.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\jwt\Authentication\Provider\JwtAuth;
use Drupal\jwt\Authentication\Event\JwtAuthValidateEvent;
use Drupal\jwt\Transcoder\JwtDecodeException;

/**
 * Implements hook_help().
 */
function private_files_adapter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the private_files_adapter module.
    case 'help.page.private_files_adapter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function private_files_adapter_theme() {
  return [
    'private_files_adapter' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function private_files_adapter_file_access(EntityInterface $entity, string $operation, AccountInterface $account): AccessResultInterface
{
    $request = \Drupal::request();
    if (strpos($request->server->get('HTTP_USER_AGENT'), "Cantaloupe") !== false
        && !empty($request->server->get('HTTP_AUTHORIZATION'))) {

        // Handles only download operation of private file or image.
        $raw_jwt = str_replace("Bearer ", "" , $request->server->get('HTTP_AUTHORIZATION'));
        // Decode JWT and validate signature.
        try {
            $transcoder = \Drupal::service('jwt.transcoder');
            $authed_userid = $transcoder->decode($raw_jwt)->getClaim(['drupal', 'uid']);

            if (empty($authed_userid)){
                return AccessResult::neutral();
            }
            $account = \Drupal\user\Entity\User::load($authed_userid);
            if (isset($account)){
                // TODO: add check the account with access control with Group
                return AccessResult::allowed();
            }
            else {
                return AccessResult::neutral();
            }
        }
        catch (JwtDecodeException $e) {
            return AccessResult::neutral();
        }
    }
    else {
        return AccessResult::neutral();
    }
}
